<?php

/**
 * @file
 * Code for the Dir feature.
 */

include_once 'dir.features.inc';

// -----------------------------------------------------------------------------
// General hook

/**
 * Implements hook_ctools_plugin_directory().
 */
function dir_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return $owner . '/' . $plugin_type;
  }
}

// -----------------------------------------------------------------------------
// Utility

/**
 * Utility function to get the dir_role that ref to dir_link.
 */
function dir_link_get_roles($link_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'dir_role')
    ->propertyCondition('link', $link_id);
  $result = $query->execute();

  return isset($result['dir_role']) ? $result['dir_role'] : array();
}

// -----------------------------------------------------------------------------
// EntityMetadataWrapper property callback

// -----------------
// dir_link property

/**
 * 'getter callback' for dir_link role property.
 */
function dir_link_role_entity_property_getter($data, array $options, $name, $type, $info) {
  return _dir_link_role_entity_property_getter(dir_link_get_roles($data->id));
}

/**
 * Helper function to prepare the return.
 */
function _dir_link_role_entity_property_getter($result) {
  $roles = array();
  foreach ($result as $role) {
    $roles[] = $role->id;
  }

  return $roles;
}

/**
 * 'getter callback' for dir_link roles property.
 */
function dir_link_roles_entity_property_getter($data, array $options, $name, $type, $info) {
  return _dir_link_roles_entity_property_getter(dir_link_get_roles($data->id));
}

/**
 * Helper function to prepare the return.
 */
function _dir_link_roles_entity_property_getter($result) {
  // Prepare the skeloton array.
  $entity_info = entity_get_info('dir_role');
  $roles = array_fill_keys(array_keys($entity_info['bundles']), NULL);
  // Fill the values
  foreach ($result as $role) {
    $roles[$role->type] = $role->id;
  }

  return $roles;
}

/**
 * 'getter callback' for dir_link container property.
 */
function dir_link_container_entity_property_getter($data, array $options, $name, $type, $info) {
  // Just a mirror of field_dir_container.
  return entity_metadata_field_property_get($data, $options, 'field_dir_container', $type, $info);
}

/**
 * 'getter callback' for dir_link containers property.
 */
function dir_link_containers_entity_property_getter($data, array $options, $name, $type, $info) {
  $container_ids = entity_metadata_field_property_get($data, $options, 'field_dir_container', $type, $info);
  $containers = array();
  foreach ($container_ids as $container_id) {
    $container = entity_load_single('dir_container', $container_id);
    $containers[$container->type][] = $container_id;
  }

  return $containers;
}

// ----------------------
// dir_container property

/**
 * 'getter callback' for dir_container links property.
 */
function dir_container_links_entity_property_getter($data, array $options, $name, $type, $info) {
  return KtoolsEntityField::entityreferenceRevertEntities('field_dir_container', $data->id, 'dir_link', $info['langcode']);
}

/**
 * 'getter callback' for dir_container category parent property.
 */
function dir_container_category_parent_entity_property_getter($data, array $options, $name, $type, $info) {
  // Just a mirror of field_dir_category_parent.
  return entity_metadata_field_property_get($data, $options, 'field_dir_category_parent', $type, $info);
}

/**
 * 'getter callback' for dir_container category child property.
 */
function dir_container_category_child_entity_property_getter($data, array $options, $name, $type, $info) {
  return KtoolsEntityField::entityreferenceRevertEntities('field_dir_category_parent', $data->id, 'dir_container', $info['langcode']);
}
